Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be a list of at least two existing subnets associated
      with at least two different availability zones. They should be residing in the
      selected Virtual Private Cloud.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
Resources:
  HttpdGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'Subnets'
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '2'
      LaunchConfigurationName: !Ref 'LaunchConfig'
      TargetGroupARNs:
        - !Ref 'ALBTargetGroup'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: 'ami-048ff3da02834afdc'
      InstanceType: !Ref 'InstanceType'
      KeyName: 'nginxKey'
      SecurityGroups:
      - !Ref 'HttpdSecurityGroup'
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe\n
            yum update -y 
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v
            yum install -y httpd 
            systemctl start httpd
            systemctl enable httpd
            echo "Hello World" > /var/www/html/index.html            
  HttpdLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref 'Subnets'
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroup'
      LoadBalancerArn: !Ref 'HttpdLoadBalancer'
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VpcId'
  HttpdSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId:
        !Ref 'VpcId'
Outputs:
  URL:
    Description: URL of the website
    Value: !Join
      - ''
      - - http://
        - !GetAtt 'HttpdLoadBalancer.DNSName'





